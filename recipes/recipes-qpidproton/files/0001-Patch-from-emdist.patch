From 0876f5a120e34dac6b6e66fc7471d2464ad592d5 Mon Sep 17 00:00:00 2001
From: gderoire <guillaume.deroire@hach.com>
Date: Fri, 22 Jul 2016 08:55:59 +0200
Subject: [PATCH] Patch from emdist

---
 examples/messenger/c/recv.c | 255 ++++++++++++++++++++++----------------------
 1 file changed, 130 insertions(+), 125 deletions(-)

diff --git a/examples/messenger/c/recv.c b/examples/messenger/c/recv.c
index 16e8321..ebeb5d0 100644
--- a/examples/messenger/c/recv.c
+++ b/examples/messenger/c/recv.c
@@ -27,128 +27,133 @@
 #include <ctype.h>
 
 #define check(messenger)                                                     \
-  {                                                                          \
-    if(pn_messenger_errno(messenger))                                        \
-    {                                                                        \
-      die(__FILE__, __LINE__, pn_error_text(pn_messenger_error(messenger))); \
-    }                                                                        \
-  }                                                                          \
-
-void die(const char *file, int line, const char *message)
-{
-  fprintf(stderr, "%s:%i: %s\n", file, line, message);
-  exit(1);
-}
-
-void usage(void)
-{
-  printf("Usage: recv [options] <addr>\n");
-  printf("-c    \tPath to the certificate file.\n");
-  printf("-k    \tPath to the private key file.\n");
-  printf("-p    \tPassword for the private key.\n");
-  printf("<addr>\tAn address.\n");
-  exit(0);
-}
-
-int main(int argc, char** argv)
-{
-  char* certificate = NULL;
-  char* privatekey = NULL;
-  char* password = NULL;
-  char* address = (char *) "amqp://~0.0.0.0";
-  int c;
-
-  pn_message_t * message;
-  pn_messenger_t * messenger;
-
-  message = pn_message();
-  messenger = pn_messenger(NULL);
-
-  opterr = 0;
-
-  while((c = getopt(argc, argv, "hc:k:p:")) != -1)
-  {
-    switch(c)
-    {
-    case 'h':
-      usage();
-      break;
-
-    case 'c': certificate = optarg; break;
-    case 'k': privatekey = optarg; break;
-    case 'p': password = optarg; break;
-
-    case '?':
-      if(optopt == 'c' ||
-         optopt == 'k' ||
-         optopt == 'p')
-      {
-        fprintf(stderr, "Option -%c requires an argument.\n", optopt);
-      }
-      else if(isprint(optopt))
-      {
-        fprintf(stderr, "Unknown option `-%c'.\n", optopt);
-      }
-      else
-      {
-        fprintf(stderr, "Unknown option character `\\x%x'.\n", optopt);
-      }
-      return 1;
-    default:
-      abort();
-    }
-  }
-
-  if (optind < argc)
-  {
-    address = argv[optind];
-  }
-
-  /* load the various command line options if they're set */
-  if(certificate)
-  {
-    pn_messenger_set_certificate(messenger, certificate);
-  }
-
-  if(privatekey)
-  {
-    pn_messenger_set_private_key(messenger, privatekey);
-  }
-
-  if(password)
-  {
-    pn_messenger_set_password(messenger, password);
-  }
-
-  pn_messenger_start(messenger);
-  check(messenger);
-
-  pn_messenger_subscribe(messenger, address);
-  check(messenger);
-
-  for(;;)
-  {
-    pn_messenger_recv(messenger, 1024);
-    check(messenger);
-
-    while(pn_messenger_incoming(messenger))
-    {
-      pn_messenger_get(messenger, message);
-      check(messenger);
-
-      {
-      char buffer[1024];
-      size_t buffsize = sizeof(buffer);
-      const char* subject = pn_message_get_subject(message);
-      pn_data_t *body = pn_message_body(message);
-      pn_data_format(body, buffer, &buffsize);
-
-      printf("Address: %s\n", pn_message_get_address(message));
-      printf("Subject: %s\n", subject ? subject : "(no subject)");
-      printf("Content: %s\n", buffer);
-      }
-    }
-  }
-
-  return 0;
-}
+{                                                                          \
+	if(pn_messenger_errno(messenger))                                        \
+	{                                                                        \
+		die(__FILE__, __LINE__, pn_error_text(pn_messenger_error(messenger))); \
+		}                                                                        \
+		}                                                                          \
+
+		void die(const char *file, int line, const char *message)
+		{
+			fprintf(stderr, "%s:%i: %s\n", file, line, message);
+			exit(1);
+		}
+
+		void usage()
+		{
+			printf("Usage: recv [options] <addr>\n");
+			printf("-c    \tPath to the certificate file.\n");
+			printf("-k    \tPath to the private key file.\n");
+			printf("-p    \tPassword for the private key.\n");
+			printf("<addr>\tAn address.\n");
+			exit(0);
+		}
+
+		int main(int argc, char** argv)
+		{
+			char* certificate = NULL;
+			char* privatekey = NULL;
+			char* password = NULL;
+			char* address = (char *) "amqp://~0.0.0.0";
+			int c;
+			opterr = 0;
+
+			while((c = getopt(argc, argv, "hc:k:p:")) != -1)
+			{
+				switch(c)
+				{
+					case 'h':
+						usage();
+						break;
+
+					case 'c': certificate = optarg; break;
+					case 'k': privatekey = optarg; break;
+					case 'p': password = optarg; break;
+
+					case '?':
+						if(optopt == 'c' ||
+							optopt == 'k' ||
+							optopt == 'p')
+						{
+							fprintf(stderr, "Option -%c requires an argument.\n", optopt);
+						}
+						else if(isprint(optopt))
+						{
+							fprintf(stderr, "Unknown option `-%c'.\n", optopt);
+						}
+						else
+						{
+							fprintf(stderr, "Unknown option character `\\x%x'.\n", optopt);
+						}
+						return 1;
+					default:
+						abort();
+				}
+			}
+
+			if (optind < argc)
+			{
+				address = argv[optind];
+			}
+
+			pn_message_t * message;
+			pn_messenger_t * messenger;
+
+			message = pn_message();
+			messenger = pn_messenger(NULL);
+
+			/* load the various command line options if they're set */
+			if(certificate)
+			{
+				pn_messenger_set_certificate(messenger, certificate);
+			}
+
+			if(privatekey)
+			{
+				pn_messenger_set_private_key(messenger, privatekey);
+			}
+
+			if(password)
+			{
+				pn_messenger_set_password(messenger, password);
+			}
+			//Avoid tracking error
+			pn_messenger_set_incoming_window(messenger, 1);
+			check(messenger);
+
+			pn_messenger_start(messenger);
+			check(messenger);
+
+			pn_messenger_subscribe(messenger, address);
+			check(messenger);
+
+			for(;;)
+			{
+				//pn_messenger_recv(messenger, 1024);
+				pn_messenger_recv(messenger, 1);
+				check(messenger);
+
+				while(pn_messenger_incoming(messenger))
+				{
+					pn_messenger_get(messenger, message);
+					check(messenger);
+
+					char buffer[1024];
+					size_t buffsize = sizeof(buffer);
+					pn_data_t *body = pn_message_body(message);
+					pn_data_format(body, buffer, &buffsize);
+
+					printf("Address: %s\n", pn_message_get_address(message));
+					const char* subject = pn_message_get_subject(message);
+					printf("Subject: %s\n", subject ? subject : "(no subject)");
+					printf("Content: %s\n", buffer);
+
+					pn_tracker_t tracker = pn_messenger_incoming_tracker(messenger);
+
+					pn_messenger_accept(messenger, tracker, PN_CUMULATIVE);
+				}
+			}
+
+			return 0;
+		}
-- 
1.9.1

