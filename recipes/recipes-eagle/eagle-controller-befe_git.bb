DESCRIPTION = "Eagle frontend & Backend applications" 
SUMMARY = "This project comprises of Eagle controller frontend & backend applications"

LICENSE = "CLOSED"

# WARNING: around 100 licenses have been listed by devtool when the recipe has been generated
# The LICENSE and LIC_FILES_CHKSUM contains however to Unknown entries and the path of LICENSE files doesn't match the real location
# This is due to "npm install" that installs dependencies (node_modules) as close to the top as is possible
# Manual LICENSE generation or validation is needed and LICENSE and LIC_FILES_CHKSUM variables must be updated accordingly.
#
# e.g. : 
#     LICENSE = "Zlib & MIT & Apache-2.0 & ISC & BSD-3-Clause"
#     LIC_FILES_CHKSUM = "file://LICENSE.md;md5=0e2ca0b23a9dfd1ac7f217b39cb4b79b \
#                         file://node_modules/socket.io-client/LICENSE;md5=b034b27f54cd5a363360fd9207438a01 \
#                         ...

require recipes/recipes-eagle/befe.inc

SRC_URI += "file://backend.service \
            file://80-backend \
            file://HACH_SPLASH_320x240.bmp \
            file://frontend.service \
            file://xserver.sh \
            file://xserver.service \
            file://logger-server.service \
           "

inherit npm
inherit systemd
inherit useradd


USERADD_PACKAGES = "${PN}"

backend_username = "_backend"
backend_userdesc = "User running Eagle backend"
backend_homedirloc = "/var/lib/eagle-backend"
backend_usershell = "/sbin/nologin"

frontend_username = "_frontend"
frontend_userdesc = "User running Eagle frontend"
frontend_homedirloc = "/var/lib/eagle-frontend"
frontend_usershell = "/sbin/nologin"

befe_licenses_file = "${WORKDIR}/BEFE-licenses.json"

USERADD_PARAM_${PN} = "--system --user-group --home-dir ${backend_homedirloc} --shell ${backend_usershell} \
    --comment \"${backend_userdesc}\" ${backend_username}; \
    --system --user-group --home-dir ${frontend_homedirloc} --shell ${frontend_usershell} \
    --comment \"${frontend_userdesc}\" ${frontend_username} \
    "

RDEPENDS_${PN} += " \
    nodejs \
    nodejs-npm \
    fuse \
    noto-fonts \
    gtk+3 \
    libxscrnsaver \
    cups \
    nss \
    libxkbcommon \
    zlib \
"

# Must be set after inherit npm since that itself sets S
S = "${WORKDIR}/git"

NPM_SHRINKWRAP := "${THISDIR}/${PN}/npm-shrinkwrap.json"
NPM_LOCKDOWN := "${THISDIR}/${PN}/lockdown.json"

# To ignore the warning on the AppImage file generated that has been stripped
INSANE_SKIP_${PN} += "already-stripped"
# To ignore the error generated by QA task on the AppImage file generated.
# A dependency to libz.so is detected and not found in RDEPENDS but zlib only PROVIDES "zlib" which is listed in RDEPENDS
INSANE_SKIP_${PN} += "file-rdeps"

FILES_${PN} += "xserver.service \
                /usr/local/bin/xserver.sh \
                /home/root/images/HACH_SPLASH_320x240.bmp \
                frontend.service \
                /usr/local/bin/eagle_frontend.AppImage \
                backend.service \
                /usr/local/bin/eagle_backend.js \
                /usr/local/bin/definitions/* \
                ${sysconfdir}/sudoers.d/80-backend \
                logger-server.service \
                /usr/local/bin/eagle_logger-server.js \
              "

SYSTEMD_SERVICE_${PN} = "frontend.service xserver.service backend.service logger-server.service"

NODE_HOME_CACHE ?= "${WORKDIR}"

npm_do_compile() {
    # Clean old node_modules, dist folder if existing before new install because not done by the clean step
    rm -rf node_modules/ dist/

    # Coming from original npm.bbclass but not sure if it is needed - to be investigate and cleaned if needed 
    # Copy in any additionally fetched modules
    if [ -d ${WORKDIR}/node_modules ] ; then
        cp -a ${WORKDIR}/node_modules ${S}/
    fi

    # changing the home directory to the working directory, the .npmrc will
    # be created in this directory
    # electron cache also
    export HOME=${NODE_HOME_CACHE}

    npm set cache ${NODE_HOME_CACHE}/npm_cache
    # clear cache before every build
    #npm cache clear --force

    # Install pkg into ${S}
    npm install
 
    run_npm_frontend_build
    run_npm_backend_build
    run_npm_logger_server_build
    run_npm_license_checker
}


run_npm_frontend_build() {
    npm run FE:electron:imx7
}


run_npm_backend_build() {
    npm run BE:pack:prod
}


run_npm_logger_server_build() {
    npm run LOG:pack:prod
}

run_npm_license_checker() {
    npm run license-checker -- ${befe_licenses_file}
}

do_install() {
    install -d ${D}/usr/local/bin/
    install -d ${D}/usr/local/bin/definitions/
    install -m 0644 apps/eagle-backend/dist/eagle_backend.js ${D}/usr/local/bin/
    install -m 0644 apps/eagle-logger-server/dist/eagle_logger-server.js ${D}/usr/local/bin/
    install -m 0755 apps/eagle-frontend/release/eagle_frontend.AppImage ${D}/usr/local/bin/

    # set up frontend files
    install -d ${D}/etc/systemd/system/
    install -m 0644 ${WORKDIR}/frontend.service ${D}/etc/systemd/system/
    install -m 0644 ${WORKDIR}/xserver.service ${D}/etc/systemd/system/
    install -d ${D}/usr/local/bin/

    install -m 0755 ${WORKDIR}/xserver.sh ${D}/usr/local/bin
    install -d ${D}/home/root/images/
    install -m 0644 ${WORKDIR}/HACH_SPLASH_320x240.bmp ${D}/home/root/images/

    cd apps/eagle-backend/dist/definitions/
    for d in $(find . -type d); do install -d "$d" "${D}/usr/local/bin/definitions/$d"; done
    for f in $(find . -type f); do install -m 644 "$f" "${D}/usr/local/bin/definitions/$f"; done
    cd -

    install -d ${D}/etc/systemd/system/
    install -m 0644 ${WORKDIR}/backend.service ${D}/etc/systemd/system/
    install -m 0644 ${WORKDIR}/logger-server.service ${D}/etc/systemd/system/

    install -d ${D}/${sysconfdir}/sudoers.d/
    install -m 0440 ${WORKDIR}/80-backend ${D}/${sysconfdir}/sudoers.d/

    # create link on logger server configuration
    ln -sfn /media/persistent/system/logger-server-configuration.json ${D}/etc/logger-server.conf 
}

# get licenses task is to populate the json file about BEFE licenses with the license text
addtask getLicenses after do_compile before do_deploy
do_getLicenses(){
    ${THISDIR}/get-befe-license-text.py ${befe_licenses_file}
}

inherit deploy
addtask deploy
do_deploy(){
    cp ${befe_licenses_file} ${DEPLOYDIR} 
}

pkg_preinst_append_${PN}() {
# create a home directory for the dedicated frontend and backend user
install -d -m 0700 -o ${frontend_username} -g ${frontend_username} "$D${frontend_homedirloc}"
install -d -m 0700 -o ${backend_username} -g ${backend_username} "$D${backend_homedirloc}"
}

# Overwrite npm.bbclass populate_packages_prepend to avoid adding all packages for the node modules as dependencies at runtime
python populate_packages_prepend () {
    pass
}
